generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  name      String         @unique
  account   String         @unique
  password  String
  email     String
  phone     String?        @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  roles     UsersOnRoles[]

  @@map("sys-user")
}

model Role {
  id                 String               @id @default(uuid())
  name               String               @unique
  description        String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  RolesOnPermissions RolesOnPermissions[]
  users              UsersOnRoles[]

  @@map("sys-role")
}

model UsersOnRoles {
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@map("sys-user-role")
}

model Permission {
  id                 String               @id @default(uuid())
  name               String
  code               String
  sort               Int                  @default(0)
  resourceId         String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  description        String?
  resource           Resource             @relation(fields: [resourceId], references: [id])
  RolesOnPermissions RolesOnPermissions[]

  @@map("sys-permission")
}

model Resource {
  id          String       @id @default(uuid())
  pid         String?
  name        String       @unique
  code        String       @unique
  subjectId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  description String?
  sort        Int          @default(0)
  permissions Permission[]
  parent      Resource?    @relation("children", fields: [pid], references: [id])
  children    Resource[]   @relation("children")
  subject     Subject      @relation(fields: [subjectId], references: [id])

  @@map("sys-resource")
}

model Subject {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  code        String     @unique
  Resources   Resource[]

  @@map("sys-subject")
}

model RolesOnPermissions {
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@map("sys-role-permission")
}

model Dictionary {
  id          String       @id @default(uuid())
  pid         String?
  code        String
  name        String
  sort        Int          @default(0)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      Dictionary?  @relation("children", fields: [pid], references: [id])
  children    Dictionary[] @relation("children")

  @@map("sys-dictionary")
}

model Language {
  id           String   @id @default(uuid())
  key          String
  value        String?
  languageCode String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sys-language")
}

model Schema {
  id        String   @id @default(uuid())
  code      String   @unique
  name      String
  json      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sys-schema")
}
