generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String         @id @default(uuid())
  name      String         @unique
  account   String         @unique
  password  String
  email     String
  phone     String?        @unique
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  roles     UsersOnRoles[]

  @@map("sys-user")
}

model Role {
  id          String               @id @default(uuid())
  name        String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  permissions RolesOnPermissions[]
  users       UsersOnRoles[]

  @@map("sys-role")
}

model UsersOnRoles {
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, roleId])
  @@map("sys-user-role")
}

model Permission {
  id          String               @id @default(uuid())
  name        String
  code        String
  sort        Int                  @default(0)
  resourceId  String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  description String?
  resource    Resource             @relation(fields: [resourceId], references: [id])
  roles       RolesOnPermissions[]

  @@map("sys-permission")
}

model Resource {
  id               String             @id @default(uuid())
  pid              String?
  type             String?
  name             String
  code             String
  subjectId        String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  description      String?
  sort             Int                @default(0)
  permissions      Permission[]
  parent           Resource?          @relation("children", fields: [pid], references: [id])
  children         Resource[]         @relation("children")
  subject          Subject            @relation(fields: [subjectId], references: [id])
  Catalogue        Catalogue[]
  Variable         Variable[]
  VariableCategory VariableCategory[]

  @@map("sys-resource")
}

model Subject {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  code        String     @unique
  Resources   Resource[]

  @@map("sys-subject")
}

model RolesOnPermissions {
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@map("sys-role-permission")
}

model Dictionary {
  id          String       @id @default(uuid())
  pid         String?
  code        String
  name        String
  sort        Int          @default(0)
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  parent      Dictionary?  @relation("children", fields: [pid], references: [id])
  children    Dictionary[] @relation("children")

  @@map("sys-dictionary")
}

model Language {
  id           String   @id @default(uuid())
  key          String
  value        String?
  languageCode String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sys-language")
}

model Schema {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String?
  json        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sys-schema")
}

model SchemaData {
  id         String   @id @default(uuid())
  jsonSchema Json
  data       Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("sys-schema-data")
}

enum FileStatus {
  Ready
  Uploading
  Completed
  Failed
}

model File {
  id         String     @id @default(uuid())
  uid        String
  key        String     @unique
  mimetype   String
  name       String
  actualname String
  size       Int
  status     FileStatus
  url        String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("sys-file")
}

enum CatalogueType {
  Folder
  File
}

enum CatalogueFileType {
  Media
  Text
  UnKonwn
}

model Catalogue {
  id          String        @id @default(uuid())
  pid         String?
  name        String
  type        CatalogueType
  fileType    String?
  resourceId  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  description String?
  content     String?       @db.Text
  url         String?
  sort        Int           @default(0)
  parent      Catalogue?    @relation("children", fields: [pid], references: [id])
  children    Catalogue[]   @relation("children")
  resource    Resource      @relation(fields: [resourceId], references: [id])

  @@map("sys-catalogue")
}

model VariableCategory {
  id          String     @id @default(uuid())
  resourceId  String
  name        String
  code        String
  description String?
  variable    Variable[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  resource Resource @relation(fields: [resourceId], references: [id])

  @@map("sys-variable-category")
}

model Variable {
  id                 String   @id @default(uuid())
  variableCategoryId String
  code               String
  type               String?
  value              Json?
  description        String?
  resourceId         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  variableCategory VariableCategory @relation(fields: [variableCategoryId], references: [id])
  resource         Resource         @relation(fields: [resourceId], references: [id])

  @@map("sys-variable")
}
